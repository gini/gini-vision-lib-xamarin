#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiniVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Delegate which can be used to communicate back to the analysis screen allowing to display custom messages on screen.
/// note:
/// Screen API only.
SWIFT_PROTOCOL("_TtP10GiniVision16AnalysisDelegate_")
@protocol AnalysisDelegate
/// Will display an error view on the analysis screen with a custom message.
/// The provided action will be called, when the user taps on the error view.
/// \param message The error message to be displayed.
///
/// \param action The action to be performed after the user tapped the error view.
///
- (void)displayErrorWithMessage:(NSString * _Nullable)message andAction:(void (^ _Nullable)(void))action;
/// In case that the <code>GiniVisionDocument</code> analysed is an image it will display a no results screen
/// with some capture suggestions. It won’t show any screen if it is not an image, return <code>false</code> in that case.
///
/// returns:
/// <code>true</code> if the screen was shown or <code>false</code> if it wasn’t.
- (BOOL)tryDisplayNoResultsScreen SWIFT_WARN_UNUSED_RESULT;
@end

/// Errors thrown when dealing with document analysis (both getting extractions and uploading documents)
typedef SWIFT_ENUM(NSInteger, AnalysisError, closed) {
/// The analysis was cancelled
  AnalysisErrorCancelled = 0,
/// There was an error creating the document
  AnalysisErrorDocumentCreation = 1,
  AnalysisErrorUnknown = 2,
};
static NSString * _Nonnull const AnalysisErrorDomain = @"GiniVision.AnalysisError";

@class UIImage;
@class Extraction;

SWIFT_CLASS("_TtC10GiniVision14AnalysisResult")
@interface AnalysisResult : NSObject
/// Images processed in the analysis
@property (nonatomic, readonly, copy) NSArray<UIImage *> * _Nonnull images;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Extraction *> * _Nonnull extractions;
- (nonnull instancetype)initWithExtractions:(NSDictionary<NSString *, Extraction *> * _Nonnull)extractions images:(NSArray<UIImage *> * _Nonnull)images OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol GiniVisionDocument;
@class GiniConfiguration;
@class NSCoder;
@class NSBundle;

/// The <code>AnalysisViewController</code> provides a custom analysis screen which shows the upload and analysis activity.
/// The user should have the option of canceling the process by navigating back to the review screen.
/// note:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision22AnalysisViewController")
@interface AnalysisViewController : UIViewController
/// Designated intitializer for the <code>AnalysisViewController</code>.
/// \param document Reviewed document ready for analysis.
///
/// \param giniConfiguration <code>GiniConfiguration</code> instance.
///
///
/// returns:
/// A view controller instance giving the user a nice user interface while waiting for the analysis results.
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document giniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Convenience intitializer for the <code>AnalysisViewController</code>.
/// \param document Reviewed document ready for analysis.
///
///
/// returns:
/// A view controller instance giving the user a nice user interface while waiting for the analysis results.
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidAppear:(BOOL)animated;
/// Displays a loading activity indicator. Should be called when document analysis is started.
- (void)showAnimation;
/// Hides the loading activity indicator. Should be called when document analysis is finished.
- (void)hideAnimation;
/// Shows an error when there was an error with either the analysis or document upload
- (void)showErrorWith:(NSString * _Nonnull)message action:(void (^ _Nonnull)(void))action;
/// Hide the error view
- (void)hideErrorWithAnimated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// Errors thrown on the camera screen or during camera initialization.
typedef SWIFT_ENUM(NSInteger, CameraError, closed) {
/// Unknown error during camera use.
  CameraErrorUnknown = 0,
/// Camera can not be loaded because the user has denied authorization in the past.
  CameraErrorNotAuthorizedToUseDevice = 1,
/// No valid input device could be found for capturing.
  CameraErrorNoInputDevice = 2,
/// Capturing could not be completed.
  CameraErrorCaptureFailed = 3,
};
static NSString * _Nonnull const CameraErrorDomain = @"GiniVision.CameraError";

@protocol CameraViewControllerDelegate;
@class UIDevice;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC10GiniVision20CameraViewController")
@interface CameraViewController : UIViewController
/// The object that acts as the delegate of the camera view controller.
@property (nonatomic, weak) id <CameraViewControllerDelegate> _Nullable delegate;
/// Designated initializer for the <code>CameraViewController</code> which allows
/// to set the <code>GiniConfiguration for the camera screen</code>.
/// All the interactions with this screen are handled by <code>CameraViewControllerDelegate</code>.
/// \param giniConfiguration <code>GiniConfiguration</code> instance.
///
///
/// returns:
/// A view controller instance allowing the user to take a picture or pick a document.
- (nonnull instancetype)initWithGiniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration currentDevice:(UIDevice * _Nonnull)currentDevice OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setupCamera;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end









@class GiniImageDocument;

@interface CameraViewController (SWIFT_EXTENSION(GiniVision))
/// Used to animate the captured image, first shrinking it and then translating it to the captured images stack view.
/// \param imageDocument <code>GiniImageDocument</code> to be animated.
///
/// \param completion Completion block.
///
- (void)animateToControlsViewWithImageDocument:(GiniImageDocument * _Nonnull)imageDocument completion:(void (^ _Nullable)(void))completion;
/// Replaces the captured images stack content with new images.
/// \param images New images to be shown in the stack. (Last image will be shown on top)
///
- (void)replaceCapturedStackImagesWith:(NSArray<UIImage *> * _Nonnull)images;
@end


@interface CameraViewController (SWIFT_EXTENSION(GiniVision))
/// Show the capture button. Should be called when onboarding is dismissed.
- (void)showCaptureButton;
/// Hide the capture button. Should be called when onboarding is presented.
- (void)hideCaptureButton;
/// Show the camera overlay. Should be called when onboarding is dismissed.
- (void)showCameraOverlay;
/// Hide the camera overlay. Should be called when onboarding is presented.
- (void)hideCameraOverlay;
/// Show the fileImportTip. Should be called when onboarding is dismissed.
- (void)showFileImportTip;
/// Hide the fileImportTip. Should be called when onboarding is presented.
- (void)hideFileImportTip;
@end

enum DocumentPickerType : NSInteger;

/// The CameraViewControllerDelegate protocol defines methods that allow you to handle captured images and user
/// actions.
/// note:
/// Component API only.
SWIFT_PROTOCOL("_TtP10GiniVision28CameraViewControllerDelegate_")
@protocol CameraViewControllerDelegate
/// Called when a user takes a picture, imports a PDF/QRCode or imports one or several images.
/// Once the method has been implemented, it is necessary to check if the number of
/// documents accumulated doesn’t exceed the minimun (<code>GiniImageDocument.maxPagesCount</code>).
/// \param viewController <code>CameraViewController</code> where the documents were taken.
///
/// \param document One or several documents either captured or imported in
/// the <code>CameraViewController</code>. They can contain an error produced in the validation process.
///
- (void)camera:(CameraViewController * _Nonnull)viewController didCapture:(id <GiniVisionDocument> _Nonnull)document;
/// Called when a user selects a picker from the picker selector sheet.
/// \param viewController <code>CameraViewController</code> where the documents were taken.
///
/// \param documentPicker <code>DocumentPickerType</code> selected in the sheet.
///
- (void)camera:(CameraViewController * _Nonnull)viewController didSelect:(enum DocumentPickerType)documentPicker;
/// Called when the <code>CameraViewController</code> appears.
/// \param viewController Camera view controller that appears.
///
- (void)cameraDidAppear:(CameraViewController * _Nonnull)viewController;
/// Called when a user taps the <code>MultipageReviewButton</code> (the one with the thumbnail of the images(s) taken).
/// Once this method is called, the <code>MultipageReviewViewController</code> should be presented.
/// \param viewController Camera view controller where the button was tapped.
///
- (void)cameraDidTapMultipageReviewButton:(CameraViewController * _Nonnull)viewController;
@end


/// Errors thrown when running a custom validation.
SWIFT_CLASS("_TtC10GiniVision29CustomDocumentValidationError")
@interface CustomDocumentValidationError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10GiniVision30CustomDocumentValidationResult")
@interface CustomDocumentValidationResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DocumentImportMethod, closed) {
  DocumentImportMethodOpenWith = 0,
  DocumentImportMethodPicker = 1,
};


SWIFT_CLASS("_TtC10GiniVision25DocumentPickerCoordinator")
@interface DocumentPickerCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIDocumentPickerViewController;

@interface DocumentPickerCoordinator (SWIFT_EXTENSION(GiniVision)) <UIDocumentPickerDelegate>
- (void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)urls;
- (void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentAtURL:(NSURL * _Nonnull)url;
- (void)documentPickerWasCancelled:(UIDocumentPickerViewController * _Nonnull)controller;
@end

@class UIDropInteraction;
@protocol UIDropSession;
@class UIDropProposal;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface DocumentPickerCoordinator (SWIFT_EXTENSION(GiniVision)) <UIDropInteractionDelegate>
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end



/// Document picker types.
/// \code
/// case gallery
/// case explorer
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, DocumentPickerType, closed) {
/// Gallery picker
  DocumentPickerTypeGallery = 0,
/// File explorer picker
  DocumentPickerTypeExplorer = 1,
};

/// Errors thrown validating a document (image or pdf).
typedef SWIFT_ENUM(NSInteger, DocumentValidationError, closed) {
/// Unknown error during review.
  DocumentValidationErrorUnknown = 0,
/// Exceeded max file size
  DocumentValidationErrorExceededMaxFileSize = 1,
/// Image format not valid
  DocumentValidationErrorImageFormatNotValid = 2,
/// File format not valid
  DocumentValidationErrorFileFormatNotValid = 3,
/// PDF length exceeded
  DocumentValidationErrorPdfPageLengthExceeded = 4,
/// QR Code formar not valid
  DocumentValidationErrorQrCodeFormatNotValid = 5,
};
static NSString * _Nonnull const DocumentValidationErrorDomain = @"GiniVision.DocumentValidationError";

/// Errors thrown on the file picker
typedef SWIFT_ENUM(NSInteger, FilePickerError, closed) {
/// Camera roll can not be loaded because the user has denied authorization in the past.
  FilePickerErrorPhotoLibraryAccessDenied = 0,
/// Max number of files picked exceeded
  FilePickerErrorMaxFilesPickedCountExceeded = 1,
/// Mixed documents unsupported
  FilePickerErrorMixedDocumentsUnsupported = 2,
};
static NSString * _Nonnull const FilePickerErrorDomain = @"GiniVision.FilePickerError";

@class UIColor;
@class GiniVisionFont;
@protocol GiniLogger;
@class UIFont;
enum GiniVisionImportFileTypes : NSInteger;
@class UIView;
@protocol PreferredButtonResource;

SWIFT_CLASS("_TtC10GiniVision17GiniConfiguration")
@interface GiniConfiguration : NSObject
/// Returns a <code>GiniConfiguration</code> instance which allows to set individual configurations
/// to change the look and feel of the Gini Vision Library.
///
/// returns:
/// Instance of <code>GiniConfiguration</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the background color in all screens of the Gini Vision Library to the specified color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Sets custom validations that can be done apart from the default ones (file size, file type…).
/// It should throw a <code>CustomDocumentValidationError</code> error.
@property (nonatomic, copy) CustomDocumentValidationResult * _Nonnull (^ _Nonnull customDocumentValidations)(id <GiniVisionDocument> _Nonnull);
/// Sets the font used in the GiniVision library by default.
@property (nonatomic, strong) GiniVisionFont * _Nonnull customFont;
/// Can be turned on during development to unlock extra information and to save captured images to camera roll.
/// warning:
/// Should never be used outside of a development enviroment.
@property (nonatomic) BOOL debugModeOn;
/// Used to handle all the logging messages in order to log them in a different way.
@property (nonatomic, strong) id <GiniLogger> _Nonnull logger;
/// Indicates whether the multipage feature is enabled or not. In case of <code>true</code>,
/// multiple pages can be processed, showing a different review screen when capturing.
@property (nonatomic) BOOL multipageEnabled;
/// Sets the tint color of the navigation bar in all screens of the Gini Vision Library to
/// the globally specified color or to a default color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
/// Sets the tint color of all navigation items in all screens of the Gini Vision Library to
/// the globally specified color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nullable navigationBarItemTintColor;
/// Sets the font of all navigation items in all screens of the Gini Vision Library to
/// the globally specified font or a default font.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIFont * _Nonnull navigationBarItemFont;
/// Sets the title color in the navigation bar in all screens of the Gini Vision Library to
/// the globally specified color or to a default color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTitleColor;
/// Sets the title font in the navigation bar in all screens of the Gini Vision Library to
/// the globally specified font or to a default font.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIFont * _Nonnull navigationBarTitleFont;
/// Sets the tint color of the UIDocumentPickerViewController navigation bar.
/// note:
/// Use only if you have a custom <code>UIAppearance</code> for your UINavigationBar
/// note:
/// Only iOS >= 11.0
@property (nonatomic, strong) UIColor * _Nullable documentPickerNavigationBarTintColor;
/// Sets the background color of an informal notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeInformationBackgroundColor;
/// Sets the text color of an informal notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeInformationTextColor;
/// Sets the background color of an error notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeErrorBackgroundColor;
/// Sets the text color of an error notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeErrorTextColor;
/// Indicates whether the open with feature is enabled or not. In case of <code>true</code>,
/// a new option with the open with tutorial wil be shown in the Help menu
@property (nonatomic) BOOL openWithEnabled;
/// Indicates whether the QR Code scanning feature is enabled or not.
@property (nonatomic) BOOL qrCodeScanningEnabled;
/// Indicates the status bar style in the Gini Vision Library.
/// note:
/// If <code>UIViewControllerBasedStatusBarAppearance</code> is set to <code>false</code> in the <code>Info.plist</code>,
/// it may not work in future versions of iOS since the <code>UIApplication.setStatusBarStyle</code> method was
/// deprecated on iOS 9.0
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Sets the text color of the descriptional text when camera access was denied.
@property (nonatomic, strong) UIColor * _Nonnull cameraNotAuthorizedTextColor;
/// Sets the text color of the button title when camera access was denied.
@property (nonatomic, strong) UIColor * _Nonnull cameraNotAuthorizedButtonTitleColor;
/// Sets the color of camera preview corner guides
@property (nonatomic, strong) UIColor * _Nonnull cameraPreviewCornerGuidesColor;
/// Set the types supported by the file import feature. <code>GiniVisionImportFileTypes.none</code> by default
@property (nonatomic) enum GiniVisionImportFileTypes fileImportSupportedTypes;
/// Sets the background color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipBackgroundColor;
/// Sets the text color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipTextColor;
/// Sets the text color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipCloseButtonColor;
/// Sets the text color of the item selected background check
@property (nonatomic, strong) UIColor * _Nonnull galleryPickerItemSelectedBackgroundCheckColor;
/// Indicates whether the flash toggle should be shown in the camera screen.
@property (nonatomic) BOOL flashToggleEnabled;
/// When the flash toggle is enabled, this flag indicates if the flash is on by default.
@property (nonatomic) BOOL flashOnByDefault;
/// Sets the color of the captured images stack indicator label
@property (nonatomic, strong) UIColor * _Nonnull imagesStackIndicatorLabelTextcolor;
/// Sets the close button text in the navigation bar on the camera screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarCameraTitleCloseButton;
/// Sets the help button text in the navigation bar on the camera screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarCameraTitleHelpButton;
/// Sets the text color of the QR Code popup button
@property (nonatomic, strong) UIColor * _Nonnull qrCodePopupButtonColor;
/// Sets the text color of the QR Code popup label
@property (nonatomic, readonly, strong) UIColor * _Nonnull qrCodePopupTextColor;
/// Sets the text color of the QR Code popup background
@property (nonatomic, readonly, strong) UIColor * _Nonnull qrCodePopupBackgroundColor;
/// Sets the continue button text in the navigation bar on the onboarding screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarOnboardingTitleContinueButton;
/// Sets the color of the page controller’s page indicator items.
@property (nonatomic, strong) UIColor * _Nonnull onboardingPageIndicatorColor;
/// Sets the color of the page controller’s current page indicator item.
@property (nonatomic, strong) UIColor * _Nonnull onboardingCurrentPageIndicatorColor;
/// Indicates whether the onboarding screen should be presented at each start of the Gini Vision Library.
/// note:
/// Screen API only.
@property (nonatomic) BOOL onboardingShowAtLaunch;
/// Indicates whether the onboarding screen should be presented at the first
/// start of the Gini Vision Library. It is advised to do so.
/// note:
/// Overwrites <code>onboardingShowAtLaunch</code> for the first launch.
/// note:
/// Screen API only.
@property (nonatomic) BOOL onboardingShowAtFirstLaunch;
/// Sets the color ot the text for all onboarding pages.
@property (nonatomic, strong) UIColor * _Nonnull onboardingTextColor;
/// All onboarding pages which will be presented in a horizontal scroll view to the user.
/// By default the Gini Vision Library comes with three pages advising the user to keep the
/// document flat, hold the device parallel and capture the whole document.
/// note:
/// Any array of views can be passed, but for your convenience we provide the <code>GINIOnboardingPage</code> class.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull onboardingPages;
/// Sets the back button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleBackButton;
/// Sets the close button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleCloseButton;
/// Sets the continue button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleContinueButton;
/// Sets the background color of the bottom section on the review screen containing the rotation button.
/// note:
/// Background will have a 20% transparency, to have enough space for the document image on smaller devices.
@property (nonatomic, strong) UIColor * _Nonnull reviewBottomViewBackgroundColor;
/// Sets the font of the text appearing at the bottom of the review screen.
@property (nonatomic, strong) UIFont * _Nonnull reviewTextBottomFont;
/// Sets the color of the text appearing at the bottom of the review screen.
@property (nonatomic, strong) UIColor * _Nonnull reviewTextBottomColor;
/// Sets the color of the pages container and toolbar
@property (nonatomic, strong) UIColor * _Nonnull multipagePagesContainerAndToolBarColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull indicatorCircleColor;
/// Sets the tint color of the toolbar items
@property (nonatomic, strong) UIColor * _Nonnull multipageToolbarItemsColor;
/// Sets the tint color of the page indicator
@property (nonatomic, strong) UIColor * _Nonnull multipagePageIndicatorColor;
/// Sets the background color of the page selected indicator
@property (nonatomic, strong) UIColor * _Nonnull multipagePageSelectedIndicatorColor;
/// Sets the background color of the page background
@property (nonatomic, strong) UIColor * _Nonnull multipagePageBackgroundColor;
/// Sets the tint color of the draggable icon in the page collection cell
@property (nonatomic, strong) UIColor * _Nonnull multipageDraggableIconColor;
/// Sets the color of the loading indicator on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisLoadingIndicatorColor;
/// Sets the color of the PDF information view on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisPDFInformationBackgroundColor;
/// Sets the color of the PDF information view on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisPDFInformationTextColor;
/// Sets the back button text in the navigation bar on the analysis screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarAnalysisTitleBackButton;
/// Sets the back button text in the navigation bar on the help menu screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarHelpMenuTitleBackToCameraButton;
/// Sets the back button text in the navigation bar on the help screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarHelpScreenTitleBackToMenuButton;
/// Indicates whether the supported format screens should be shown. In case of <code>false</code>,
/// the option won’t be shown in the Help menu.
@property (nonatomic) BOOL shouldShowSupportedFormatsScreen;
/// Sets the color of the unsupported formats icon background to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull nonSupportedFormatsIconColor;
/// Sets the color of the supported formats icon background to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull supportedFormatsIconColor;
/// Sets the text of the app name for the Open with tutorial texts
@property (nonatomic, copy) NSString * _Nonnull openWithAppNameForTexts;
/// Sets the color of the step indicator for the Open with tutorial
@property (nonatomic, strong) UIColor * _Nonnull stepIndicatorColor;
/// Sets the color of the bottom button to the specified color
@property (nonatomic, strong) UIColor * _Nonnull noResultsBottomButtonColor;
/// Sets the color of the warning container background to the specified color
@property (nonatomic, strong) UIColor * _Nonnull noResultsWarningContainerIconColor;
/// Sets if the Drag&Drop step should be shown in the “Open with” tutorial
@property (nonatomic) BOOL shouldShowDragAndDropTutorial;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable closeButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable helpButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable backToCameraButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable backToMenuButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable nextButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable cancelButtonResource;
@end

/// Supported document types by Gini Vision library.
typedef SWIFT_ENUM(NSInteger, GiniVisionImportFileTypes, closed) {
  GiniVisionImportFileTypesNone = 0,
  GiniVisionImportFileTypesPdf = 1,
  GiniVisionImportFileTypesPdf_and_images = 2,
};

enum GiniVisionDocumentType : NSInteger;

/// Document processed by the <em>GiniVision</em> library.
SWIFT_PROTOCOL("_TtP10GiniVision18GiniVisionDocument_")
@protocol GiniVisionDocument
@property (nonatomic, readonly) enum GiniVisionDocumentType type;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, strong) UIImage * _Nullable previewImage;
@property (nonatomic, readonly) BOOL isReviewable;
@property (nonatomic, readonly) BOOL isImported;
@end


SWIFT_CLASS("_TtC10GiniVision17GiniImageDocument")
@interface GiniImageDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniImageDocument (SWIFT_EXTENSION(GiniVision)) <NSItemProviderReading>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;)
+ (NSArray<NSString *> * _Nonnull)readableTypeIdentifiersForItemProvider SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10GiniVision10GiniLogger_")
@protocol GiniLogger
/// Logs a message
/// \param message Message printed out
///
- (void)logWithMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC10GiniVision15GiniPDFDocument")
@interface GiniPDFDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniPDFDocument (SWIFT_EXTENSION(GiniVision)) <NSItemProviderReading>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;)
+ (NSArray<NSString *> * _Nonnull)readableTypeIdentifiersForItemProvider SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// A Gini Vision document made from a QR code.
/// The Gini Vision Library supports the following QR code formats:
/// <ul>
///   <li>
///     Bezahlcode (http://www.bezahlcode.de).
///   </li>
///   <li>
///     Stuzza (AT) and GiroCode (DE) (https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/quick-response-code-guidelines-enable-data-capture-initiation).
///   </li>
///   <li>
///     EPS E-Payment (https://eservice.stuzza.at/de/eps-ueberweisung-dokumentation/category/5-dokumentation.html).
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10GiniVision18GiniQRCodeDocument")
@interface GiniQRCodeDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniQRCodeDocument (SWIFT_EXTENSION(GiniVision))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@protocol GiniVisionDelegate;

/// Convenience class to interact with the Gini Vision Library.
/// The Gini Vision Library provides views for capturing, reviewing and analysing documents.
/// By integrating this library in your application you can allow your users to easily take a picture of
/// a document, review it and - by implementing the necessary callbacks - upload the document for analysis to the Gini API.
/// The Gini Vision Library can be integrated in two ways, either by using the <em>Screen API</em> or
/// the <em>Component API</em>. The Screen API provides a fully pre-configured navigation controller for
/// easy integration, while the Component API provides single view controllers for advanced
/// integration with more freedom for customization.
/// important:
/// When using the Component API we advise you to use a similar flow as suggested in the
/// Screen API. Use the <code>CameraViewController</code> as an entry point with the <code>OnboardingViewController</code> presented on
/// top of it. After capturing let the user review the document with the <code>ReviewViewController</code> and finally present
/// the <code>AnalysisViewController</code> while the user waits for the analysis results.
SWIFT_CLASS("_TtC10GiniVision10GiniVision")
@interface GiniVision : NSObject
/// Sets a configuration which is used to customize the look and feel of the Gini Vision Library,
/// for example to change texts and colors displayed to the user.
/// \param configuration The configuration to set.
///
+ (void)setConfiguration:(GiniConfiguration * _Nonnull)configuration;
/// Returns a view controller which will handle the analysis process.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param importedDocuments Documents that come from a source different than <code>CameraViewController</code>.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate importedDocuments:(NSArray<id <GiniVisionDocument>> * _Nullable)importedDocuments SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller which will handle the analysis process.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param importedDocument Documents that come from a source different than CameraViewController.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate importedDocument:(id <GiniVisionDocument> _Nullable)importedDocument SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller which will handle the analysis process.
/// Allows to set a custom configuration to change the look and feel of the Gini Vision Library.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param configuration The configuration to set.
///
/// \param importedDocument Documents that come from a source different than CameraViewController.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate withConfiguration:(GiniConfiguration * _Nonnull)configuration importedDocument:(id <GiniVisionDocument> _Nullable)importedDocument SWIFT_WARN_UNUSED_RESULT;
/// Returns the current version of the Gini Vision Library.
/// If there is an error retrieving the version the returned value will be an empty string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// Validates a <code>GiniVisionDocument</code> with a given <code>GiniConfiguration</code>.
///
/// throws:
/// <code>DocumentValidationError</code> if there was an error during the validation.
+ (BOOL)validate:(id <GiniVisionDocument> _Nonnull)document withConfig:(GiniConfiguration * _Nonnull)giniConfiguration error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol UploadDelegate;

/// Delegate to inform the reveiver about the current status of the Gini Vision Library.
/// Makes use of callbacks for handling incoming data and to control view controller presentation.
/// note:
/// Screen API only.
SWIFT_PROTOCOL("_TtP10GiniVision18GiniVisionDelegate_")
@protocol GiniVisionDelegate
/// Called when the user has taken a picture or imported a file (image or PDF) from camera roll or document explorer
/// \param document <code>GiniVisionDocument</code>
///
/// \param networkDelegate <code>GiniVisionNetworkDelegate</code> used to tell the Gini Vision
/// Library to upload the pages upload state
///
- (void)didCaptureWithDocument:(id <GiniVisionDocument> _Nonnull)document networkDelegate:(id <AnalysisDelegate, UploadDelegate> _Nonnull)networkDelegate;
/// Called when the user has taken a picture or imported a file (image or PDF) from camera roll or document explorer
/// \param document <code>GiniVisionDocument</code>
///
- (void)didCaptureWithDocument:(id <GiniVisionDocument> _Nonnull)document SWIFT_UNAVAILABLE_MSG("Use didCapture(document: GiniVisionDocument, networkDelegate: GiniVisionNetworkDelegate) instead");
/// Called when the user has taken an image.
/// \param imageData JPEG image data including meta information or PDF data
///
- (void)didCapture:(NSData * _Nonnull)imageData SWIFT_UNAVAILABLE_MSG("Use didCapture(document: GiniVisionDocument, uploadDelegate: UploadDelegate) instead");
/// Called when the user has reviewed one or several documents.
/// It is used to add any optional parameters, like rotationDelta, when creating the composite document.
/// \param documents An array containing on or several reviewed <code>GiniVisionDocument</code>
///
/// \param networkDelegate <code>GiniVisionNetworkDelegate</code> used to tell the Gini Vision Library that the documents
/// were reviewed and can be analyzed or uploaded.
///
- (void)didReviewWithDocuments:(NSArray<id <GiniVisionDocument>> * _Nonnull)documents networkDelegate:(id <AnalysisDelegate, UploadDelegate> _Nonnull)networkDelegate;
/// Called when the user has reviewed the image and potentially rotated it to the correct orientation.
/// \param document <code>GiniVisionDocument</code>
///
/// \param changes Indicates whether <code>imageData</code> was altered.
///
- (void)didReviewWithDocument:(id <GiniVisionDocument> _Nonnull)document withChanges:(BOOL)changes SWIFT_UNAVAILABLE_MSG("Use didReview(documents: [GiniVisionDocument]) instead");
/// Called when the user has reviewed the image and potentially rotated it to the correct orientation.
/// \param imageData JPEG image data including eventually updated meta information or PDF Data
///
/// \param changes Indicates whether <code>imageData</code> was altered.
///
- (void)didReview:(NSData * _Nonnull)imageData withChanges:(BOOL)changes SWIFT_UNAVAILABLE_MSG("Use didReview(documents: [GiniVisionDocument]) instead");
@optional
/// Called when the user is presented with the analysis screen. Use the <code>analysisDelegate</code>
/// object to inform the user about the current status of the analysis task.
/// \param analysisDelegate The analysis delegate to send updates to.
///
- (void)didShowAnalysis:(id <AnalysisDelegate> _Nonnull)analysisDelegate SWIFT_UNAVAILABLE_MSG("\n    This method is no longer needed since the analysis should start\n    always in the didReview(documents:networkDelegate:) method\n    ");
@required
/// Called when the user cancels capturing on the camera screen.
/// Should be used to dismiss the presented view controller.
- (void)didCancelCapturing;
/// Called when the user navigates back from the review screen to the camera potentially to
/// retake an image. Should be used to cancel any ongoing analysis task on the image.
- (void)didCancelReviewFor:(id <GiniVisionDocument> _Nonnull)document;
/// Called when the user navigates back from the review screen to the camera potentially to
/// retake an image. Should be used to cancel any ongoing analysis task on the image.
- (void)didCancelReview SWIFT_UNAVAILABLE_MSG("Use didCancelReview(for: GiniVisionDocument) instead");
/// Called when the user navigates back from the analysis screen to the review screen.
/// It is used to cancel any ongoing analysis task on the image.
- (void)didCancelAnalysis;
@end



/// The <code>GiniVisionDocumentBuilder</code> provides a way to build a <code>GiniVisionDocument</code> from a <code>Data</code> object and
/// a <code>DocumentSource</code>. Additionally the <code>DocumentImportMethod</code> can bet set after builder iniatilization.
/// This is an example of how a <code>GiniVisionDocument</code> should be built when it has been imported
/// with the <em>Open with</em> feature.
/// \code
/// let documentBuilder = GiniVisionDocumentBuilder(data: data, documentSource: .appName(name: sourceApplication))
/// documentBuilder.importMethod = .openWith
/// let document = documentBuilder.build()
/// do {
/// try document?.validate()
/// ...
/// } catch {
/// ...
/// }
///
/// \endcode
SWIFT_CLASS("_TtC10GiniVision25GiniVisionDocumentBuilder")
@interface GiniVisionDocumentBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, GiniVisionDocumentType, closed) {
  GiniVisionDocumentTypePdf = 0,
  GiniVisionDocumentTypeImage = 1,
  GiniVisionDocumentTypeQrcode = 2,
};


/// Provides a way to set all possible font weights used in the GiniVision library.
/// <em>Possible weights:</em>
/// <ul>
///   <li>
///     regular
///   </li>
///   <li>
///     bold
///   </li>
///   <li>
///     light
///   </li>
///   <li>
///     thin
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10GiniVision14GiniVisionFont")
@interface GiniVisionFont : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The GiniVisionResultsDelegate protocol defines methods that allow you to handle the analysis result.
SWIFT_PROTOCOL("_TtP10GiniVision25GiniVisionResultsDelegate_")
@protocol GiniVisionResultsDelegate
/// Called when the analysis finished with results
/// \param result Contains the analysis result
///
/// \param sendFeedbackBlock Block used to send feeback once the results have been corrected
///
- (void)giniVisionAnalysisDidFinishWithResult:(AnalysisResult * _Nonnull)result sendFeedbackBlock:(void (^ _Nonnull)(NSDictionary<NSString *, Extraction *> * _Nonnull))sendFeedbackBlock;
/// Called when the analysis finished without results.
/// \param showingNoResultsScreen Indicated if the <code>ImageAnalysisNoResultsViewController</code> has been shown
///
- (void)giniVisionAnalysisDidFinishWithoutResults:(BOOL)showingNoResultsScreen;
/// Called when the analysis was cancelled.
- (void)giniVisionDidCancelAnalysis;
@end


/// The <code>HelpMenuViewController</code> provides explanations on how to take better pictures, how to
/// use the <em>Open with</em> feature and which formats are supported by the Gini Vision Library.
SWIFT_CLASS("_TtC10GiniVision22HelpMenuViewController")
@interface HelpMenuViewController : UITableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

@interface HelpMenuViewController (SWIFT_EXTENSION(GiniVision))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// The <code>ImageAnalysisNoResultsViewController</code> provides a custom no results screen which shows some capture
/// suggestions when there is no results when analysing an image.
SWIFT_CLASS("_TtC10GiniVision36ImageAnalysisNoResultsViewController")
@interface ImageAnalysisNoResultsViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewCell;

@interface ImageAnalysisNoResultsViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;
@class UICollectionReusableView;

@interface ImageAnalysisNoResultsViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10GiniVision29MultipageReviewViewController")
@interface MultipageReviewViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end






@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView moveItemAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
@end

@class UIScrollView;

@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end




@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision))
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end



typedef SWIFT_ENUM(NSInteger, NoticeActionType, closed) {
  NoticeActionTypeRetry = 0,
  NoticeActionTypeRetake = 1,
};


/// Custom view to easily create onboarding pages which can then be used in <code>OnboardingViewController</code>.
/// Simply pass an image and a name. Both will be beautifully aligned and displayed to the user.
/// note:
/// The text length should not exceed 50 characters, depending on the font used,
/// and should preferably stretch out over three lines.
SWIFT_CLASS("_TtC10GiniVision14OnboardingPage")
@interface OnboardingPage : UIView
/// Designated initializer for the <code>OnboardingPage</code> class which allows to create a custom onboarding page
/// just by passing an image and a text. The text will be displayed underneath the image.
/// \param image The image to be displayed.
///
/// \param text The text to be displayed underneath the image.
///
///
/// returns:
/// A simple custom view to be displayed in the onboarding.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image text:(NSString * _Nonnull)text rotateImageInLandscape:(BOOL)rotateImageInLandscape OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer for the <code>OnboardingPage</code> class which allows to create a custom onboarding
/// page simply by passing an image name and a text. The text will be displayed underneath the image.
/// \param imageName The name of the image to be displayed.
///
/// \param text The text to be displayed underneath the image.
///
///
/// returns:
/// A simple custom view to be displayed in the onboarding or <code>nil</code> when no image
/// with the given name could be found.
- (nullable instancetype)initWithImageNamed:(NSString * _Nonnull)imageName text:(NSString * _Nonnull)text rotateImageInLandscape:(BOOL)rotateImageInLandscape;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The <code>OnboardingViewController</code> provides a custom onboarding screen which presents some
/// introductory screens to the user on how to get the camera in a perfect position etc.
/// By default, three screens are pre-configured.
/// To allow displaying the onboarding as a transparent modal view, set the <code>modalPresentationStyle</code>
/// of the container class to <code>.OverCurrentContext</code>. Add a blank page at the end to make it possible
/// to “swipe away” the onboarding. To achieve this, the container class needs to implement <code>UIScrollViewDelegate</code>
/// and dismiss the view when the last (empty) page is reached. With the <code>UIScrollViewDelegate</code> callbacks
/// it is also possible to add a custom page control and update the current page accordingly.
/// Use the <code>OnboardingPage</code> class to quickly create custom onboarding pages in a nice consistent design.
/// See below how easy it is to present an custom onboarding view controller.
/// \code
/// let pages = [
///     OnboardingPage(image: myOnboardingImage1, text: "My Onboarding Page 1"),
///     OnboardingPage(image: myOnboardingImage2, text: "My Onboarding Page 2"),
///     OnboardingPage(image: myOnboardingImage3, text: "My Onboarding Page 3")
///     OnboardingPage(image: myOnboardingImage4, text: "My Onboarding Page 4")
/// ]
/// let onboardingController = OnboardingViewController(pages: pages, scrollViewDelegate: self)
/// presentViewController(onboardingController, animated: true, completion: nil)
///
/// \endcodenote:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision24OnboardingViewController")
@interface OnboardingViewController : UIViewController
/// Array of views displayed as pages inside the scroll view.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull pages;
/// Scroll view used to display different onboarding pages.
@property (nonatomic, strong) UIScrollView * _Nonnull scrollView;
/// Designated intitializer for the <code>OnboardingViewController</code> which allows to pass a custom set of
/// views which will be displayed in horizontal scroll view.
/// \param pages An array of views to be displayed in the scroll view.
///
/// \param scrollViewDelegate The receiver for the scroll view delegate callbacks.
///
///
/// returns:
/// A view controller instance intended to allow the user to get a brief overview over
/// the functionality provided by the Gini Vision Library.
- (nonnull instancetype)initWithPages:(NSArray<UIView *> * _Nonnull)pages scrollViewDelegate:(id <UIScrollViewDelegate> _Nullable)scrollViewDelegate OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer for the <code>OnboardingViewController</code> which will set a predefined set
/// of views as the onboarding pages.
/// \param scrollViewDelegate The receiver for the scroll view delegate callbacks.
///
///
/// returns:
/// A view controller instance intended to allow the user to get a brief overview over
/// the functionality provided by the Gini Vision Library.
- (nonnull instancetype)initWithScrollViewDelegate:(id <UIScrollViewDelegate> _Nullable)scrollViewDelegate;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Scrolls the scroll view to the next page.
/// \param animated Defines whether scrolling should be animated.
///
- (void)scrollToNextPage:(BOOL)animated;
/// Center page in case it is not centered (i.e after rotation)
- (void)centerToPage:(NSInteger)page;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10GiniVision23PreferredButtonResource_")
@protocol PreferredButtonResource
@property (nonatomic, readonly, strong) UIImage * _Nullable preferredImage;
@property (nonatomic, readonly, copy) NSString * _Nullable preferredText;
@end

/// Errors thrown on the review screen.
typedef SWIFT_ENUM(NSInteger, ReviewError, closed) {
/// Unknown error during review.
  ReviewErrorUnknown = 0,
};
static NSString * _Nonnull const ReviewErrorDomain = @"GiniVision.ReviewError";

@protocol ReviewViewControllerDelegate;

/// The <code>ReviewViewController</code> provides a custom review screen. The user has the option to check
/// for blurriness and document orientation. If the result is not satisfying, the user can either
/// return to the camera screen or rotate the photo by steps of 90 degrees. The photo should be
/// uploaded to Gini’s backend immediately after having been taken as it is safe to assume that
/// in most cases the photo is good enough to be processed further.
/// note:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision20ReviewViewController")
@interface ReviewViewController : UIViewController
/// The object that acts as the delegate of the review view controller.
@property (nonatomic, weak) id <ReviewViewControllerDelegate> _Nullable delegate;
/// Designated initializer for ReviewViewController
/// note:
/// Component API only.
/// <ul>
///   <li>
///     paramter giniConfiguration: <code>GiniConfiguration</code>
///   </li>
/// </ul>
/// \param document Document to be reviewed
///
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document giniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Called to notify the view controller that its view has just laid out its subviews.
- (void)viewDidLayoutSubviews;
/// Notifies the view controller that its view was added to a view hierarchy.
/// \param animated If true, the view was added to the window using an animation.
///
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ReviewViewController (SWIFT_EXTENSION(GiniVision)) <UIScrollViewDelegate>
/// Asks the delegate for the view to scale when zooming is about to occur in the scroll view.
/// \param scrollView The scroll view object displaying the content view.
///
///
/// returns:
/// A <code>UIView</code> object that will be scaled as a result of the zooming gesture.
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that the scroll view’s zoom factor has changed.
/// \param scrollView The scroll-view object whose zoom factor has changed.
///
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end


/// The ReviewViewControllerDelegate protocol defines methods that allow you to manage when a user rotates an image.
/// note:
/// Component API only.
SWIFT_PROTOCOL("_TtP10GiniVision28ReviewViewControllerDelegate_")
@protocol ReviewViewControllerDelegate
- (void)review:(ReviewViewController * _Nonnull)viewController didReview:(id <GiniVisionDocument> _Nonnull)document;
@end
















/// The UploadDelegate protocol defines methods that allow you to notify the <em>Gini Vision Library</em> when a document upload
/// has finished (either successfully or with an error)
SWIFT_PROTOCOL("_TtP10GiniVision14UploadDelegate_")
@protocol UploadDelegate
- (void)uploadDidFailFor:(id <GiniVisionDocument> _Nonnull)document with:(NSError * _Nonnull)error;
- (void)uploadDidCompleteFor:(id <GiniVisionDocument> _Nonnull)document;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.4 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="GiniVision",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


/// Delegate which can be used to communicate back to the analysis screen allowing to display custom messages on screen.
/// note:
/// Screen API only.
SWIFT_PROTOCOL("_TtP10GiniVision16AnalysisDelegate_")
@protocol AnalysisDelegate
/// Will display an error view on the analysis screen with a custom message.
/// The provided action will be called, when the user taps on the error view.
/// \param message The error message to be displayed.
///
/// \param action The action to be performed after the user tapped the error view.
///
- (void)displayErrorWithMessage:(NSString * _Nullable)message andAction:(void (^ _Nullable)(void))action;
/// In case that the <code>GiniVisionDocument</code> analysed is an image it will display a no results screen
/// with some capture suggestions. It won’t show any screen if it is not an image, return <code>false</code> in that case.
///
/// returns:
/// <code>true</code> if the screen was shown or <code>false</code> if it wasn’t.
- (BOOL)tryDisplayNoResultsScreen SWIFT_WARN_UNUSED_RESULT;
@end

/// Errors thrown when dealing with document analysis (both getting extractions and uploading documents)
typedef SWIFT_ENUM(NSInteger, AnalysisError, closed) {
/// The analysis was cancelled
  AnalysisErrorCancelled = 0,
/// There was an error creating the document
  AnalysisErrorDocumentCreation = 1,
  AnalysisErrorUnknown = 2,
};
static NSString * _Nonnull const AnalysisErrorDomain = @"GiniVision.AnalysisError";

@class UIImage;
@class Extraction;

SWIFT_CLASS("_TtC10GiniVision14AnalysisResult")
@interface AnalysisResult : NSObject
/// Images processed in the analysis
@property (nonatomic, readonly, copy) NSArray<UIImage *> * _Nonnull images;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Extraction *> * _Nonnull extractions;
- (nonnull instancetype)initWithExtractions:(NSDictionary<NSString *, Extraction *> * _Nonnull)extractions images:(NSArray<UIImage *> * _Nonnull)images OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol GiniVisionDocument;
@class GiniConfiguration;
@class NSCoder;
@class NSBundle;

/// The <code>AnalysisViewController</code> provides a custom analysis screen which shows the upload and analysis activity.
/// The user should have the option of canceling the process by navigating back to the review screen.
/// note:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision22AnalysisViewController")
@interface AnalysisViewController : UIViewController
/// Designated intitializer for the <code>AnalysisViewController</code>.
/// \param document Reviewed document ready for analysis.
///
/// \param giniConfiguration <code>GiniConfiguration</code> instance.
///
///
/// returns:
/// A view controller instance giving the user a nice user interface while waiting for the analysis results.
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document giniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Convenience intitializer for the <code>AnalysisViewController</code>.
/// \param document Reviewed document ready for analysis.
///
///
/// returns:
/// A view controller instance giving the user a nice user interface while waiting for the analysis results.
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidAppear:(BOOL)animated;
/// Displays a loading activity indicator. Should be called when document analysis is started.
- (void)showAnimation;
/// Hides the loading activity indicator. Should be called when document analysis is finished.
- (void)hideAnimation;
/// Shows an error when there was an error with either the analysis or document upload
- (void)showErrorWith:(NSString * _Nonnull)message action:(void (^ _Nonnull)(void))action;
/// Hide the error view
- (void)hideErrorWithAnimated:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// Errors thrown on the camera screen or during camera initialization.
typedef SWIFT_ENUM(NSInteger, CameraError, closed) {
/// Unknown error during camera use.
  CameraErrorUnknown = 0,
/// Camera can not be loaded because the user has denied authorization in the past.
  CameraErrorNotAuthorizedToUseDevice = 1,
/// No valid input device could be found for capturing.
  CameraErrorNoInputDevice = 2,
/// Capturing could not be completed.
  CameraErrorCaptureFailed = 3,
};
static NSString * _Nonnull const CameraErrorDomain = @"GiniVision.CameraError";

@protocol CameraViewControllerDelegate;
@class UIDevice;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC10GiniVision20CameraViewController")
@interface CameraViewController : UIViewController
/// The object that acts as the delegate of the camera view controller.
@property (nonatomic, weak) id <CameraViewControllerDelegate> _Nullable delegate;
/// Designated initializer for the <code>CameraViewController</code> which allows
/// to set the <code>GiniConfiguration for the camera screen</code>.
/// All the interactions with this screen are handled by <code>CameraViewControllerDelegate</code>.
/// \param giniConfiguration <code>GiniConfiguration</code> instance.
///
///
/// returns:
/// A view controller instance allowing the user to take a picture or pick a document.
- (nonnull instancetype)initWithGiniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration currentDevice:(UIDevice * _Nonnull)currentDevice OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)setupCamera;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end









@class GiniImageDocument;

@interface CameraViewController (SWIFT_EXTENSION(GiniVision))
/// Used to animate the captured image, first shrinking it and then translating it to the captured images stack view.
/// \param imageDocument <code>GiniImageDocument</code> to be animated.
///
/// \param completion Completion block.
///
- (void)animateToControlsViewWithImageDocument:(GiniImageDocument * _Nonnull)imageDocument completion:(void (^ _Nullable)(void))completion;
/// Replaces the captured images stack content with new images.
/// \param images New images to be shown in the stack. (Last image will be shown on top)
///
- (void)replaceCapturedStackImagesWith:(NSArray<UIImage *> * _Nonnull)images;
@end


@interface CameraViewController (SWIFT_EXTENSION(GiniVision))
/// Show the capture button. Should be called when onboarding is dismissed.
- (void)showCaptureButton;
/// Hide the capture button. Should be called when onboarding is presented.
- (void)hideCaptureButton;
/// Show the camera overlay. Should be called when onboarding is dismissed.
- (void)showCameraOverlay;
/// Hide the camera overlay. Should be called when onboarding is presented.
- (void)hideCameraOverlay;
/// Show the fileImportTip. Should be called when onboarding is dismissed.
- (void)showFileImportTip;
/// Hide the fileImportTip. Should be called when onboarding is presented.
- (void)hideFileImportTip;
@end

enum DocumentPickerType : NSInteger;

/// The CameraViewControllerDelegate protocol defines methods that allow you to handle captured images and user
/// actions.
/// note:
/// Component API only.
SWIFT_PROTOCOL("_TtP10GiniVision28CameraViewControllerDelegate_")
@protocol CameraViewControllerDelegate
/// Called when a user takes a picture, imports a PDF/QRCode or imports one or several images.
/// Once the method has been implemented, it is necessary to check if the number of
/// documents accumulated doesn’t exceed the minimun (<code>GiniImageDocument.maxPagesCount</code>).
/// \param viewController <code>CameraViewController</code> where the documents were taken.
///
/// \param document One or several documents either captured or imported in
/// the <code>CameraViewController</code>. They can contain an error produced in the validation process.
///
- (void)camera:(CameraViewController * _Nonnull)viewController didCapture:(id <GiniVisionDocument> _Nonnull)document;
/// Called when a user selects a picker from the picker selector sheet.
/// \param viewController <code>CameraViewController</code> where the documents were taken.
///
/// \param documentPicker <code>DocumentPickerType</code> selected in the sheet.
///
- (void)camera:(CameraViewController * _Nonnull)viewController didSelect:(enum DocumentPickerType)documentPicker;
/// Called when the <code>CameraViewController</code> appears.
/// \param viewController Camera view controller that appears.
///
- (void)cameraDidAppear:(CameraViewController * _Nonnull)viewController;
/// Called when a user taps the <code>MultipageReviewButton</code> (the one with the thumbnail of the images(s) taken).
/// Once this method is called, the <code>MultipageReviewViewController</code> should be presented.
/// \param viewController Camera view controller where the button was tapped.
///
- (void)cameraDidTapMultipageReviewButton:(CameraViewController * _Nonnull)viewController;
@end


/// Errors thrown when running a custom validation.
SWIFT_CLASS("_TtC10GiniVision29CustomDocumentValidationError")
@interface CustomDocumentValidationError : NSError
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary<NSString *, id> * _Nullable)dict OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10GiniVision30CustomDocumentValidationResult")
@interface CustomDocumentValidationResult : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, DocumentImportMethod, closed) {
  DocumentImportMethodOpenWith = 0,
  DocumentImportMethodPicker = 1,
};


SWIFT_CLASS("_TtC10GiniVision25DocumentPickerCoordinator")
@interface DocumentPickerCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class UIDocumentPickerViewController;

@interface DocumentPickerCoordinator (SWIFT_EXTENSION(GiniVision)) <UIDocumentPickerDelegate>
- (void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentsAtURLs:(NSArray<NSURL *> * _Nonnull)urls;
- (void)documentPicker:(UIDocumentPickerViewController * _Nonnull)controller didPickDocumentAtURL:(NSURL * _Nonnull)url;
- (void)documentPickerWasCancelled:(UIDocumentPickerViewController * _Nonnull)controller;
@end

@class UIDropInteraction;
@protocol UIDropSession;
@class UIDropProposal;

SWIFT_AVAILABILITY(ios,introduced=11.0)
@interface DocumentPickerCoordinator (SWIFT_EXTENSION(GiniVision)) <UIDropInteractionDelegate>
- (BOOL)dropInteraction:(UIDropInteraction * _Nonnull)interaction canHandleSession:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (UIDropProposal * _Nonnull)dropInteraction:(UIDropInteraction * _Nonnull)interaction sessionDidUpdate:(id <UIDropSession> _Nonnull)session SWIFT_WARN_UNUSED_RESULT;
- (void)dropInteraction:(UIDropInteraction * _Nonnull)interaction performDrop:(id <UIDropSession> _Nonnull)session;
@end



/// Document picker types.
/// \code
/// case gallery
/// case explorer
///
/// \endcode
typedef SWIFT_ENUM(NSInteger, DocumentPickerType, closed) {
/// Gallery picker
  DocumentPickerTypeGallery = 0,
/// File explorer picker
  DocumentPickerTypeExplorer = 1,
};

/// Errors thrown validating a document (image or pdf).
typedef SWIFT_ENUM(NSInteger, DocumentValidationError, closed) {
/// Unknown error during review.
  DocumentValidationErrorUnknown = 0,
/// Exceeded max file size
  DocumentValidationErrorExceededMaxFileSize = 1,
/// Image format not valid
  DocumentValidationErrorImageFormatNotValid = 2,
/// File format not valid
  DocumentValidationErrorFileFormatNotValid = 3,
/// PDF length exceeded
  DocumentValidationErrorPdfPageLengthExceeded = 4,
/// QR Code formar not valid
  DocumentValidationErrorQrCodeFormatNotValid = 5,
};
static NSString * _Nonnull const DocumentValidationErrorDomain = @"GiniVision.DocumentValidationError";

/// Errors thrown on the file picker
typedef SWIFT_ENUM(NSInteger, FilePickerError, closed) {
/// Camera roll can not be loaded because the user has denied authorization in the past.
  FilePickerErrorPhotoLibraryAccessDenied = 0,
/// Max number of files picked exceeded
  FilePickerErrorMaxFilesPickedCountExceeded = 1,
/// Mixed documents unsupported
  FilePickerErrorMixedDocumentsUnsupported = 2,
};
static NSString * _Nonnull const FilePickerErrorDomain = @"GiniVision.FilePickerError";

@class UIColor;
@class GiniVisionFont;
@protocol GiniLogger;
@class UIFont;
enum GiniVisionImportFileTypes : NSInteger;
@class UIView;
@protocol PreferredButtonResource;

SWIFT_CLASS("_TtC10GiniVision17GiniConfiguration")
@interface GiniConfiguration : NSObject
/// Returns a <code>GiniConfiguration</code> instance which allows to set individual configurations
/// to change the look and feel of the Gini Vision Library.
///
/// returns:
/// Instance of <code>GiniConfiguration</code>.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets the background color in all screens of the Gini Vision Library to the specified color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull backgroundColor;
/// Sets custom validations that can be done apart from the default ones (file size, file type…).
/// It should throw a <code>CustomDocumentValidationError</code> error.
@property (nonatomic, copy) CustomDocumentValidationResult * _Nonnull (^ _Nonnull customDocumentValidations)(id <GiniVisionDocument> _Nonnull);
/// Sets the font used in the GiniVision library by default.
@property (nonatomic, strong) GiniVisionFont * _Nonnull customFont;
/// Can be turned on during development to unlock extra information and to save captured images to camera roll.
/// warning:
/// Should never be used outside of a development enviroment.
@property (nonatomic) BOOL debugModeOn;
/// Used to handle all the logging messages in order to log them in a different way.
@property (nonatomic, strong) id <GiniLogger> _Nonnull logger;
/// Indicates whether the multipage feature is enabled or not. In case of <code>true</code>,
/// multiple pages can be processed, showing a different review screen when capturing.
@property (nonatomic) BOOL multipageEnabled;
/// Sets the tint color of the navigation bar in all screens of the Gini Vision Library to
/// the globally specified color or to a default color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTintColor;
/// Sets the tint color of all navigation items in all screens of the Gini Vision Library to
/// the globally specified color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nullable navigationBarItemTintColor;
/// Sets the font of all navigation items in all screens of the Gini Vision Library to
/// the globally specified font or a default font.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIFont * _Nonnull navigationBarItemFont;
/// Sets the title color in the navigation bar in all screens of the Gini Vision Library to
/// the globally specified color or to a default color.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIColor * _Nonnull navigationBarTitleColor;
/// Sets the title font in the navigation bar in all screens of the Gini Vision Library to
/// the globally specified font or to a default font.
/// note:
/// Screen API only.
@property (nonatomic, strong) UIFont * _Nonnull navigationBarTitleFont;
/// Sets the tint color of the UIDocumentPickerViewController navigation bar.
/// note:
/// Use only if you have a custom <code>UIAppearance</code> for your UINavigationBar
/// note:
/// Only iOS >= 11.0
@property (nonatomic, strong) UIColor * _Nullable documentPickerNavigationBarTintColor;
/// Sets the background color of an informal notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeInformationBackgroundColor;
/// Sets the text color of an informal notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeInformationTextColor;
/// Sets the background color of an error notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeErrorBackgroundColor;
/// Sets the text color of an error notice. Notices are small pieces of
/// information appearing underneath the navigation bar.
@property (nonatomic, strong) UIColor * _Nonnull noticeErrorTextColor;
/// Indicates whether the open with feature is enabled or not. In case of <code>true</code>,
/// a new option with the open with tutorial wil be shown in the Help menu
@property (nonatomic) BOOL openWithEnabled;
/// Indicates whether the QR Code scanning feature is enabled or not.
@property (nonatomic) BOOL qrCodeScanningEnabled;
/// Indicates the status bar style in the Gini Vision Library.
/// note:
/// If <code>UIViewControllerBasedStatusBarAppearance</code> is set to <code>false</code> in the <code>Info.plist</code>,
/// it may not work in future versions of iOS since the <code>UIApplication.setStatusBarStyle</code> method was
/// deprecated on iOS 9.0
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Sets the text color of the descriptional text when camera access was denied.
@property (nonatomic, strong) UIColor * _Nonnull cameraNotAuthorizedTextColor;
/// Sets the text color of the button title when camera access was denied.
@property (nonatomic, strong) UIColor * _Nonnull cameraNotAuthorizedButtonTitleColor;
/// Sets the color of camera preview corner guides
@property (nonatomic, strong) UIColor * _Nonnull cameraPreviewCornerGuidesColor;
/// Set the types supported by the file import feature. <code>GiniVisionImportFileTypes.none</code> by default
@property (nonatomic) enum GiniVisionImportFileTypes fileImportSupportedTypes;
/// Sets the background color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipBackgroundColor;
/// Sets the text color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipTextColor;
/// Sets the text color of the new file import button hint
@property (nonatomic, strong) UIColor * _Nonnull fileImportToolTipCloseButtonColor;
/// Sets the text color of the item selected background check
@property (nonatomic, strong) UIColor * _Nonnull galleryPickerItemSelectedBackgroundCheckColor;
/// Indicates whether the flash toggle should be shown in the camera screen.
@property (nonatomic) BOOL flashToggleEnabled;
/// When the flash toggle is enabled, this flag indicates if the flash is on by default.
@property (nonatomic) BOOL flashOnByDefault;
/// Sets the color of the captured images stack indicator label
@property (nonatomic, strong) UIColor * _Nonnull imagesStackIndicatorLabelTextcolor;
/// Sets the close button text in the navigation bar on the camera screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarCameraTitleCloseButton;
/// Sets the help button text in the navigation bar on the camera screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarCameraTitleHelpButton;
/// Sets the text color of the QR Code popup button
@property (nonatomic, strong) UIColor * _Nonnull qrCodePopupButtonColor;
/// Sets the text color of the QR Code popup label
@property (nonatomic, readonly, strong) UIColor * _Nonnull qrCodePopupTextColor;
/// Sets the text color of the QR Code popup background
@property (nonatomic, readonly, strong) UIColor * _Nonnull qrCodePopupBackgroundColor;
/// Sets the continue button text in the navigation bar on the onboarding screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarOnboardingTitleContinueButton;
/// Sets the color of the page controller’s page indicator items.
@property (nonatomic, strong) UIColor * _Nonnull onboardingPageIndicatorColor;
/// Sets the color of the page controller’s current page indicator item.
@property (nonatomic, strong) UIColor * _Nonnull onboardingCurrentPageIndicatorColor;
/// Indicates whether the onboarding screen should be presented at each start of the Gini Vision Library.
/// note:
/// Screen API only.
@property (nonatomic) BOOL onboardingShowAtLaunch;
/// Indicates whether the onboarding screen should be presented at the first
/// start of the Gini Vision Library. It is advised to do so.
/// note:
/// Overwrites <code>onboardingShowAtLaunch</code> for the first launch.
/// note:
/// Screen API only.
@property (nonatomic) BOOL onboardingShowAtFirstLaunch;
/// Sets the color ot the text for all onboarding pages.
@property (nonatomic, strong) UIColor * _Nonnull onboardingTextColor;
/// All onboarding pages which will be presented in a horizontal scroll view to the user.
/// By default the Gini Vision Library comes with three pages advising the user to keep the
/// document flat, hold the device parallel and capture the whole document.
/// note:
/// Any array of views can be passed, but for your convenience we provide the <code>GINIOnboardingPage</code> class.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull onboardingPages;
/// Sets the back button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleBackButton;
/// Sets the close button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleCloseButton;
/// Sets the continue button text in the navigation bar on the review screen.
/// note:
/// Screen API only.
@property (nonatomic, copy) NSString * _Nonnull navigationBarReviewTitleContinueButton;
/// Sets the background color of the bottom section on the review screen containing the rotation button.
/// note:
/// Background will have a 20% transparency, to have enough space for the document image on smaller devices.
@property (nonatomic, strong) UIColor * _Nonnull reviewBottomViewBackgroundColor;
/// Sets the font of the text appearing at the bottom of the review screen.
@property (nonatomic, strong) UIFont * _Nonnull reviewTextBottomFont;
/// Sets the color of the text appearing at the bottom of the review screen.
@property (nonatomic, strong) UIColor * _Nonnull reviewTextBottomColor;
/// Sets the color of the pages container and toolbar
@property (nonatomic, strong) UIColor * _Nonnull multipagePagesContainerAndToolBarColor;
@property (nonatomic, readonly, strong) UIColor * _Nonnull indicatorCircleColor;
/// Sets the tint color of the toolbar items
@property (nonatomic, strong) UIColor * _Nonnull multipageToolbarItemsColor;
/// Sets the tint color of the page indicator
@property (nonatomic, strong) UIColor * _Nonnull multipagePageIndicatorColor;
/// Sets the background color of the page selected indicator
@property (nonatomic, strong) UIColor * _Nonnull multipagePageSelectedIndicatorColor;
/// Sets the background color of the page background
@property (nonatomic, strong) UIColor * _Nonnull multipagePageBackgroundColor;
/// Sets the tint color of the draggable icon in the page collection cell
@property (nonatomic, strong) UIColor * _Nonnull multipageDraggableIconColor;
/// Sets the color of the loading indicator on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisLoadingIndicatorColor;
/// Sets the color of the PDF information view on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisPDFInformationBackgroundColor;
/// Sets the color of the PDF information view on the analysis screen to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull analysisPDFInformationTextColor;
/// Sets the back button text in the navigation bar on the analysis screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarAnalysisTitleBackButton;
/// Sets the back button text in the navigation bar on the help menu screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarHelpMenuTitleBackToCameraButton;
/// Sets the back button text in the navigation bar on the help screen.
@property (nonatomic, copy) NSString * _Nonnull navigationBarHelpScreenTitleBackToMenuButton;
/// Indicates whether the supported format screens should be shown. In case of <code>false</code>,
/// the option won’t be shown in the Help menu.
@property (nonatomic) BOOL shouldShowSupportedFormatsScreen;
/// Sets the color of the unsupported formats icon background to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull nonSupportedFormatsIconColor;
/// Sets the color of the supported formats icon background to the specified color.
@property (nonatomic, strong) UIColor * _Nonnull supportedFormatsIconColor;
/// Sets the text of the app name for the Open with tutorial texts
@property (nonatomic, copy) NSString * _Nonnull openWithAppNameForTexts;
/// Sets the color of the step indicator for the Open with tutorial
@property (nonatomic, strong) UIColor * _Nonnull stepIndicatorColor;
/// Sets the color of the bottom button to the specified color
@property (nonatomic, strong) UIColor * _Nonnull noResultsBottomButtonColor;
/// Sets the color of the warning container background to the specified color
@property (nonatomic, strong) UIColor * _Nonnull noResultsWarningContainerIconColor;
/// Sets if the Drag&Drop step should be shown in the “Open with” tutorial
@property (nonatomic) BOOL shouldShowDragAndDropTutorial;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable closeButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable helpButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable backToCameraButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable backToMenuButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable nextButtonResource;
@property (nonatomic, strong) id <PreferredButtonResource> _Nullable cancelButtonResource;
@end

/// Supported document types by Gini Vision library.
typedef SWIFT_ENUM(NSInteger, GiniVisionImportFileTypes, closed) {
  GiniVisionImportFileTypesNone = 0,
  GiniVisionImportFileTypesPdf = 1,
  GiniVisionImportFileTypesPdf_and_images = 2,
};

enum GiniVisionDocumentType : NSInteger;

/// Document processed by the <em>GiniVision</em> library.
SWIFT_PROTOCOL("_TtP10GiniVision18GiniVisionDocument_")
@protocol GiniVisionDocument
@property (nonatomic, readonly) enum GiniVisionDocumentType type;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, strong) UIImage * _Nullable previewImage;
@property (nonatomic, readonly) BOOL isReviewable;
@property (nonatomic, readonly) BOOL isImported;
@end


SWIFT_CLASS("_TtC10GiniVision17GiniImageDocument")
@interface GiniImageDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniImageDocument (SWIFT_EXTENSION(GiniVision)) <NSItemProviderReading>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;)
+ (NSArray<NSString *> * _Nonnull)readableTypeIdentifiersForItemProvider SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP10GiniVision10GiniLogger_")
@protocol GiniLogger
/// Logs a message
/// \param message Message printed out
///
- (void)logWithMessage:(NSString * _Nonnull)message;
@end


SWIFT_CLASS("_TtC10GiniVision15GiniPDFDocument")
@interface GiniPDFDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniPDFDocument (SWIFT_EXTENSION(GiniVision)) <NSItemProviderReading>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSArray<NSString *> * _Nonnull readableTypeIdentifiersForItemProvider;)
+ (NSArray<NSString *> * _Nonnull)readableTypeIdentifiersForItemProvider SWIFT_WARN_UNUSED_RESULT;
+ (nullable instancetype)objectWithItemProviderData:(NSData * _Nonnull)data typeIdentifier:(NSString * _Nonnull)typeIdentifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// A Gini Vision document made from a QR code.
/// The Gini Vision Library supports the following QR code formats:
/// <ul>
///   <li>
///     Bezahlcode (http://www.bezahlcode.de).
///   </li>
///   <li>
///     Stuzza (AT) and GiroCode (DE) (https://www.europeanpaymentscouncil.eu/document-library/guidance-documents/quick-response-code-guidelines-enable-data-capture-initiation).
///   </li>
///   <li>
///     EPS E-Payment (https://eservice.stuzza.at/de/eps-ueberweisung-dokumentation/category/5-dokumentation.html).
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10GiniVision18GiniQRCodeDocument")
@interface GiniQRCodeDocument : NSObject <GiniVisionDocument>
@property (nonatomic) enum GiniVisionDocumentType type;
@property (nonatomic, copy) NSData * _Nonnull data;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, strong) UIImage * _Nullable previewImage;
@property (nonatomic) BOOL isReviewable;
@property (nonatomic) BOOL isImported;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface GiniQRCodeDocument (SWIFT_EXTENSION(GiniVision))
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end

@protocol GiniVisionDelegate;

/// Convenience class to interact with the Gini Vision Library.
/// The Gini Vision Library provides views for capturing, reviewing and analysing documents.
/// By integrating this library in your application you can allow your users to easily take a picture of
/// a document, review it and - by implementing the necessary callbacks - upload the document for analysis to the Gini API.
/// The Gini Vision Library can be integrated in two ways, either by using the <em>Screen API</em> or
/// the <em>Component API</em>. The Screen API provides a fully pre-configured navigation controller for
/// easy integration, while the Component API provides single view controllers for advanced
/// integration with more freedom for customization.
/// important:
/// When using the Component API we advise you to use a similar flow as suggested in the
/// Screen API. Use the <code>CameraViewController</code> as an entry point with the <code>OnboardingViewController</code> presented on
/// top of it. After capturing let the user review the document with the <code>ReviewViewController</code> and finally present
/// the <code>AnalysisViewController</code> while the user waits for the analysis results.
SWIFT_CLASS("_TtC10GiniVision10GiniVision")
@interface GiniVision : NSObject
/// Sets a configuration which is used to customize the look and feel of the Gini Vision Library,
/// for example to change texts and colors displayed to the user.
/// \param configuration The configuration to set.
///
+ (void)setConfiguration:(GiniConfiguration * _Nonnull)configuration;
/// Returns a view controller which will handle the analysis process.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param importedDocuments Documents that come from a source different than <code>CameraViewController</code>.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate importedDocuments:(NSArray<id <GiniVisionDocument>> * _Nullable)importedDocuments SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller which will handle the analysis process.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param importedDocument Documents that come from a source different than CameraViewController.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate importedDocument:(id <GiniVisionDocument> _Nullable)importedDocument SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller which will handle the analysis process.
/// Allows to set a custom configuration to change the look and feel of the Gini Vision Library.
/// note:
/// Screen API only.
/// \param delegate An instance conforming to the <code>GiniVisionDelegate</code> protocol.
///
/// \param configuration The configuration to set.
///
/// \param importedDocument Documents that come from a source different than CameraViewController.
/// There should be either images or one PDF, and they should be validated before calling this method.
///
///
/// returns:
/// A presentable view controller.
+ (UIViewController * _Nonnull)viewControllerWithDelegate:(id <GiniVisionDelegate> _Nonnull)delegate withConfiguration:(GiniConfiguration * _Nonnull)configuration importedDocument:(id <GiniVisionDocument> _Nullable)importedDocument SWIFT_WARN_UNUSED_RESULT;
/// Returns the current version of the Gini Vision Library.
/// If there is an error retrieving the version the returned value will be an empty string.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull versionString;)
+ (NSString * _Nonnull)versionString SWIFT_WARN_UNUSED_RESULT;
/// Validates a <code>GiniVisionDocument</code> with a given <code>GiniConfiguration</code>.
///
/// throws:
/// <code>DocumentValidationError</code> if there was an error during the validation.
+ (BOOL)validate:(id <GiniVisionDocument> _Nonnull)document withConfig:(GiniConfiguration * _Nonnull)giniConfiguration error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@protocol UploadDelegate;

/// Delegate to inform the reveiver about the current status of the Gini Vision Library.
/// Makes use of callbacks for handling incoming data and to control view controller presentation.
/// note:
/// Screen API only.
SWIFT_PROTOCOL("_TtP10GiniVision18GiniVisionDelegate_")
@protocol GiniVisionDelegate
/// Called when the user has taken a picture or imported a file (image or PDF) from camera roll or document explorer
/// \param document <code>GiniVisionDocument</code>
///
/// \param networkDelegate <code>GiniVisionNetworkDelegate</code> used to tell the Gini Vision
/// Library to upload the pages upload state
///
- (void)didCaptureWithDocument:(id <GiniVisionDocument> _Nonnull)document networkDelegate:(id <AnalysisDelegate, UploadDelegate> _Nonnull)networkDelegate;
/// Called when the user has taken a picture or imported a file (image or PDF) from camera roll or document explorer
/// \param document <code>GiniVisionDocument</code>
///
- (void)didCaptureWithDocument:(id <GiniVisionDocument> _Nonnull)document SWIFT_UNAVAILABLE_MSG("Use didCapture(document: GiniVisionDocument, networkDelegate: GiniVisionNetworkDelegate) instead");
/// Called when the user has taken an image.
/// \param imageData JPEG image data including meta information or PDF data
///
- (void)didCapture:(NSData * _Nonnull)imageData SWIFT_UNAVAILABLE_MSG("Use didCapture(document: GiniVisionDocument, uploadDelegate: UploadDelegate) instead");
/// Called when the user has reviewed one or several documents.
/// It is used to add any optional parameters, like rotationDelta, when creating the composite document.
/// \param documents An array containing on or several reviewed <code>GiniVisionDocument</code>
///
/// \param networkDelegate <code>GiniVisionNetworkDelegate</code> used to tell the Gini Vision Library that the documents
/// were reviewed and can be analyzed or uploaded.
///
- (void)didReviewWithDocuments:(NSArray<id <GiniVisionDocument>> * _Nonnull)documents networkDelegate:(id <AnalysisDelegate, UploadDelegate> _Nonnull)networkDelegate;
/// Called when the user has reviewed the image and potentially rotated it to the correct orientation.
/// \param document <code>GiniVisionDocument</code>
///
/// \param changes Indicates whether <code>imageData</code> was altered.
///
- (void)didReviewWithDocument:(id <GiniVisionDocument> _Nonnull)document withChanges:(BOOL)changes SWIFT_UNAVAILABLE_MSG("Use didReview(documents: [GiniVisionDocument]) instead");
/// Called when the user has reviewed the image and potentially rotated it to the correct orientation.
/// \param imageData JPEG image data including eventually updated meta information or PDF Data
///
/// \param changes Indicates whether <code>imageData</code> was altered.
///
- (void)didReview:(NSData * _Nonnull)imageData withChanges:(BOOL)changes SWIFT_UNAVAILABLE_MSG("Use didReview(documents: [GiniVisionDocument]) instead");
@optional
/// Called when the user is presented with the analysis screen. Use the <code>analysisDelegate</code>
/// object to inform the user about the current status of the analysis task.
/// \param analysisDelegate The analysis delegate to send updates to.
///
- (void)didShowAnalysis:(id <AnalysisDelegate> _Nonnull)analysisDelegate SWIFT_UNAVAILABLE_MSG("\n    This method is no longer needed since the analysis should start\n    always in the didReview(documents:networkDelegate:) method\n    ");
@required
/// Called when the user cancels capturing on the camera screen.
/// Should be used to dismiss the presented view controller.
- (void)didCancelCapturing;
/// Called when the user navigates back from the review screen to the camera potentially to
/// retake an image. Should be used to cancel any ongoing analysis task on the image.
- (void)didCancelReviewFor:(id <GiniVisionDocument> _Nonnull)document;
/// Called when the user navigates back from the review screen to the camera potentially to
/// retake an image. Should be used to cancel any ongoing analysis task on the image.
- (void)didCancelReview SWIFT_UNAVAILABLE_MSG("Use didCancelReview(for: GiniVisionDocument) instead");
/// Called when the user navigates back from the analysis screen to the review screen.
/// It is used to cancel any ongoing analysis task on the image.
- (void)didCancelAnalysis;
@end



/// The <code>GiniVisionDocumentBuilder</code> provides a way to build a <code>GiniVisionDocument</code> from a <code>Data</code> object and
/// a <code>DocumentSource</code>. Additionally the <code>DocumentImportMethod</code> can bet set after builder iniatilization.
/// This is an example of how a <code>GiniVisionDocument</code> should be built when it has been imported
/// with the <em>Open with</em> feature.
/// \code
/// let documentBuilder = GiniVisionDocumentBuilder(data: data, documentSource: .appName(name: sourceApplication))
/// documentBuilder.importMethod = .openWith
/// let document = documentBuilder.build()
/// do {
/// try document?.validate()
/// ...
/// } catch {
/// ...
/// }
///
/// \endcode
SWIFT_CLASS("_TtC10GiniVision25GiniVisionDocumentBuilder")
@interface GiniVisionDocumentBuilder : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



typedef SWIFT_ENUM(NSInteger, GiniVisionDocumentType, closed) {
  GiniVisionDocumentTypePdf = 0,
  GiniVisionDocumentTypeImage = 1,
  GiniVisionDocumentTypeQrcode = 2,
};


/// Provides a way to set all possible font weights used in the GiniVision library.
/// <em>Possible weights:</em>
/// <ul>
///   <li>
///     regular
///   </li>
///   <li>
///     bold
///   </li>
///   <li>
///     light
///   </li>
///   <li>
///     thin
///   </li>
/// </ul>
SWIFT_CLASS("_TtC10GiniVision14GiniVisionFont")
@interface GiniVisionFont : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The GiniVisionResultsDelegate protocol defines methods that allow you to handle the analysis result.
SWIFT_PROTOCOL("_TtP10GiniVision25GiniVisionResultsDelegate_")
@protocol GiniVisionResultsDelegate
/// Called when the analysis finished with results
/// \param result Contains the analysis result
///
/// \param sendFeedbackBlock Block used to send feeback once the results have been corrected
///
- (void)giniVisionAnalysisDidFinishWithResult:(AnalysisResult * _Nonnull)result sendFeedbackBlock:(void (^ _Nonnull)(NSDictionary<NSString *, Extraction *> * _Nonnull))sendFeedbackBlock;
/// Called when the analysis finished without results.
/// \param showingNoResultsScreen Indicated if the <code>ImageAnalysisNoResultsViewController</code> has been shown
///
- (void)giniVisionAnalysisDidFinishWithoutResults:(BOOL)showingNoResultsScreen;
/// Called when the analysis was cancelled.
- (void)giniVisionDidCancelAnalysis;
@end


/// The <code>HelpMenuViewController</code> provides explanations on how to take better pictures, how to
/// use the <em>Open with</em> feature and which formats are supported by the Gini Vision Library.
SWIFT_CLASS("_TtC10GiniVision22HelpMenuViewController")
@interface HelpMenuViewController : UITableViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithStyle:(UITableViewStyle)style SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UITableView;
@class UITableViewCell;

@interface HelpMenuViewController (SWIFT_EXTENSION(GiniVision))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


/// The <code>ImageAnalysisNoResultsViewController</code> provides a custom no results screen which shows some capture
/// suggestions when there is no results when analysing an image.
SWIFT_CLASS("_TtC10GiniVision36ImageAnalysisNoResultsViewController")
@interface ImageAnalysisNoResultsViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class UICollectionViewCell;

@interface ImageAnalysisNoResultsViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;
@class UICollectionReusableView;

@interface ImageAnalysisNoResultsViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10GiniVision29MultipageReviewViewController")
@interface MultipageReviewViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end






@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionReusableView * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView viewForSupplementaryElementOfKind:(NSString * _Nonnull)kind atIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView moveItemAtIndexPath:(NSIndexPath * _Nonnull)sourceIndexPath toIndexPath:(NSIndexPath * _Nonnull)destinationIndexPath;
@end

@class UIScrollView;

@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout referenceSizeForFooterInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidEndDecelerating:(UIScrollView * _Nonnull)scrollView;
@end




@interface MultipageReviewViewController (SWIFT_EXTENSION(GiniVision))
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
@end



typedef SWIFT_ENUM(NSInteger, NoticeActionType, closed) {
  NoticeActionTypeRetry = 0,
  NoticeActionTypeRetake = 1,
};


/// Custom view to easily create onboarding pages which can then be used in <code>OnboardingViewController</code>.
/// Simply pass an image and a name. Both will be beautifully aligned and displayed to the user.
/// note:
/// The text length should not exceed 50 characters, depending on the font used,
/// and should preferably stretch out over three lines.
SWIFT_CLASS("_TtC10GiniVision14OnboardingPage")
@interface OnboardingPage : UIView
/// Designated initializer for the <code>OnboardingPage</code> class which allows to create a custom onboarding page
/// just by passing an image and a text. The text will be displayed underneath the image.
/// \param image The image to be displayed.
///
/// \param text The text to be displayed underneath the image.
///
///
/// returns:
/// A simple custom view to be displayed in the onboarding.
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image text:(NSString * _Nonnull)text rotateImageInLandscape:(BOOL)rotateImageInLandscape OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer for the <code>OnboardingPage</code> class which allows to create a custom onboarding
/// page simply by passing an image name and a text. The text will be displayed underneath the image.
/// \param imageName The name of the image to be displayed.
///
/// \param text The text to be displayed underneath the image.
///
///
/// returns:
/// A simple custom view to be displayed in the onboarding or <code>nil</code> when no image
/// with the given name could be found.
- (nullable instancetype)initWithImageNamed:(NSString * _Nonnull)imageName text:(NSString * _Nonnull)text rotateImageInLandscape:(BOOL)rotateImageInLandscape;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// The <code>OnboardingViewController</code> provides a custom onboarding screen which presents some
/// introductory screens to the user on how to get the camera in a perfect position etc.
/// By default, three screens are pre-configured.
/// To allow displaying the onboarding as a transparent modal view, set the <code>modalPresentationStyle</code>
/// of the container class to <code>.OverCurrentContext</code>. Add a blank page at the end to make it possible
/// to “swipe away” the onboarding. To achieve this, the container class needs to implement <code>UIScrollViewDelegate</code>
/// and dismiss the view when the last (empty) page is reached. With the <code>UIScrollViewDelegate</code> callbacks
/// it is also possible to add a custom page control and update the current page accordingly.
/// Use the <code>OnboardingPage</code> class to quickly create custom onboarding pages in a nice consistent design.
/// See below how easy it is to present an custom onboarding view controller.
/// \code
/// let pages = [
///     OnboardingPage(image: myOnboardingImage1, text: "My Onboarding Page 1"),
///     OnboardingPage(image: myOnboardingImage2, text: "My Onboarding Page 2"),
///     OnboardingPage(image: myOnboardingImage3, text: "My Onboarding Page 3")
///     OnboardingPage(image: myOnboardingImage4, text: "My Onboarding Page 4")
/// ]
/// let onboardingController = OnboardingViewController(pages: pages, scrollViewDelegate: self)
/// presentViewController(onboardingController, animated: true, completion: nil)
///
/// \endcodenote:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision24OnboardingViewController")
@interface OnboardingViewController : UIViewController
/// Array of views displayed as pages inside the scroll view.
@property (nonatomic, copy) NSArray<UIView *> * _Nonnull pages;
/// Scroll view used to display different onboarding pages.
@property (nonatomic, strong) UIScrollView * _Nonnull scrollView;
/// Designated intitializer for the <code>OnboardingViewController</code> which allows to pass a custom set of
/// views which will be displayed in horizontal scroll view.
/// \param pages An array of views to be displayed in the scroll view.
///
/// \param scrollViewDelegate The receiver for the scroll view delegate callbacks.
///
///
/// returns:
/// A view controller instance intended to allow the user to get a brief overview over
/// the functionality provided by the Gini Vision Library.
- (nonnull instancetype)initWithPages:(NSArray<UIView *> * _Nonnull)pages scrollViewDelegate:(id <UIScrollViewDelegate> _Nullable)scrollViewDelegate OBJC_DESIGNATED_INITIALIZER;
/// Convenience initializer for the <code>OnboardingViewController</code> which will set a predefined set
/// of views as the onboarding pages.
/// \param scrollViewDelegate The receiver for the scroll view delegate callbacks.
///
///
/// returns:
/// A view controller instance intended to allow the user to get a brief overview over
/// the functionality provided by the Gini Vision Library.
- (nonnull instancetype)initWithScrollViewDelegate:(id <UIScrollViewDelegate> _Nullable)scrollViewDelegate;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Scrolls the scroll view to the next page.
/// \param animated Defines whether scrolling should be animated.
///
- (void)scrollToNextPage:(BOOL)animated;
/// Center page in case it is not centered (i.e after rotation)
- (void)centerToPage:(NSInteger)page;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP10GiniVision23PreferredButtonResource_")
@protocol PreferredButtonResource
@property (nonatomic, readonly, strong) UIImage * _Nullable preferredImage;
@property (nonatomic, readonly, copy) NSString * _Nullable preferredText;
@end

/// Errors thrown on the review screen.
typedef SWIFT_ENUM(NSInteger, ReviewError, closed) {
/// Unknown error during review.
  ReviewErrorUnknown = 0,
};
static NSString * _Nonnull const ReviewErrorDomain = @"GiniVision.ReviewError";

@protocol ReviewViewControllerDelegate;

/// The <code>ReviewViewController</code> provides a custom review screen. The user has the option to check
/// for blurriness and document orientation. If the result is not satisfying, the user can either
/// return to the camera screen or rotate the photo by steps of 90 degrees. The photo should be
/// uploaded to Gini’s backend immediately after having been taken as it is safe to assume that
/// in most cases the photo is good enough to be processed further.
/// note:
/// Component API only.
SWIFT_CLASS("_TtC10GiniVision20ReviewViewController")
@interface ReviewViewController : UIViewController
/// The object that acts as the delegate of the review view controller.
@property (nonatomic, weak) id <ReviewViewControllerDelegate> _Nullable delegate;
/// Designated initializer for ReviewViewController
/// note:
/// Component API only.
/// <ul>
///   <li>
///     paramter giniConfiguration: <code>GiniConfiguration</code>
///   </li>
/// </ul>
/// \param document Document to be reviewed
///
- (nonnull instancetype)initWithDocument:(id <GiniVisionDocument> _Nonnull)document giniConfiguration:(GiniConfiguration * _Nonnull)giniConfiguration OBJC_DESIGNATED_INITIALIZER;
/// Returns an object initialized from data in a given unarchiver.
/// warning:
/// Not implemented.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Called to notify the view controller that its view has just laid out its subviews.
- (void)viewDidLayoutSubviews;
/// Notifies the view controller that its view was added to a view hierarchy.
/// \param animated If true, the view was added to the window using an animation.
///
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ReviewViewController (SWIFT_EXTENSION(GiniVision)) <UIScrollViewDelegate>
/// Asks the delegate for the view to scale when zooming is about to occur in the scroll view.
/// \param scrollView The scroll view object displaying the content view.
///
///
/// returns:
/// A <code>UIView</code> object that will be scaled as a result of the zooming gesture.
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
/// Informs the delegate that the scroll view’s zoom factor has changed.
/// \param scrollView The scroll-view object whose zoom factor has changed.
///
- (void)scrollViewDidZoom:(UIScrollView * _Nonnull)scrollView;
@end


/// The ReviewViewControllerDelegate protocol defines methods that allow you to manage when a user rotates an image.
/// note:
/// Component API only.
SWIFT_PROTOCOL("_TtP10GiniVision28ReviewViewControllerDelegate_")
@protocol ReviewViewControllerDelegate
- (void)review:(ReviewViewController * _Nonnull)viewController didReview:(id <GiniVisionDocument> _Nonnull)document;
@end
















/// The UploadDelegate protocol defines methods that allow you to notify the <em>Gini Vision Library</em> when a document upload
/// has finished (either successfully or with an error)
SWIFT_PROTOCOL("_TtP10GiniVision14UploadDelegate_")
@protocol UploadDelegate
- (void)uploadDidFailFor:(id <GiniVisionDocument> _Nonnull)document with:(NSError * _Nonnull)error;
- (void)uploadDidCompleteFor:(id <GiniVisionDocument> _Nonnull)document;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
